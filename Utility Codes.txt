#Made By Abhimanyu Singh --> linkedin - www.linkedin.com/in/abhimanyusingh0111
import tkinter as tk
from tkinter import messagebox, simpledialog, Toplevel
import webbrowser
import boto3
import cv2
import mediapipe as mp
import numpy as np
import pyttsx3
from pytube import YouTube
import requests
import screen_brightness_control as sbc
from math import hypot

def web_search():
    search_query = simpledialog.askstring("Search", "Enter search query")
    if search_query:
        webbrowser.open(f"https://www.google.com/search?q={search_query}")

def list_ec2_instances():
    ec2 = boto3.client('ec2')
    response = ec2.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
    instances = [instance['InstanceId'] for reservation in response['Reservations'] for instance in reservation['Instances']]
    messagebox.showinfo("Running EC2 Instances", "\n".join(instances))

def geolocation():
    try:
        response = requests.get('https://ipinfo.io')
        data = response.json()
        location_info = f"IP Address: {data['ip']}\nCity: {data['city']}\nRegion: {data['region']}\nCountry: {data['country']}\nLocation: {data['loc']}"
        messagebox.showinfo("Geolocation", location_info)
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

def adjust_brightness():
    mpHands = mp.solutions.hands
    hands = mpHands.Hands(static_image_mode=False, model_complexity=1, min_detection_confidence=0.75, min_tracking_confidence=0.75, max_num_hands=2)
    Draw = mp.solutions.drawing_utils

    cap = cv2.VideoCapture(0)
    while True:
        _, frame = cap.read()
        frame = cv2.flip(frame, 1)
        frameRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        Process = hands.process(frameRGB)
        landmarkList = []
        if Process.multi_hand_landmarks:
            for handlm in Process.multi_hand_landmarks:
                for _id, landmarks in enumerate(handlm.landmark):
                    height, width, color_channels = frame.shape
                    x, y = int(landmarks.x * width), int(landmarks.y * height)
                    landmarkList.append([_id, x, y])
                Draw.draw_landmarks(frame, handlm, mpHands.HAND_CONNECTIONS)
        if landmarkList!= []:
            x_1, y_1 = landmarkList[4][1], landmarkList[4][2]
            x_2, y_2 = landmarkList[8][1], landmarkList[8][2]
            cv2.circle(frame, (x_1, y_1), 7, (0, 255, 0), cv2.FILLED)
            cv2.circle(frame, (x_2, y_2), 7, (0, 255, 0), cv2.FILLED)
            cv2.line(frame, (x_1, y_1), (x_2, y_2), (0, 255, 0), 3)
            L = hypot(x_2 - x_1, y_2 - y_1)
            b_level = np.interp(L, [15, 220], [0, 100])
            sbc.set_brightness(int(b_level))
        cv2.imshow('Image', frame)
        if cv2.waitKey(10) & 0xff == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

def download_youtube_video():
    def download():
        video_url = url_entry.get()
        if video_url:
            try:
                yt = YouTube(video_url)
                video_stream = yt.streams.get_highest_resolution()
                video_stream.download()
                messagebox.showinfo("Success", f"Downloaded: {yt.title}")
            except Exception as e:
                messagebox.showerror("Error", f"An error occurred: {e}")

    download_window = Toplevel(root)
    download_window.title("YouTube Video Downloader")
    tk.Label(download_window, text="Enter YouTube URL:").pack(padx=10, pady=10)
    url_entry = tk.Entry(download_window, width=50)
    url_entry.pack(padx=10, pady=10)
    tk.Button(download_window, text="Download", command=download).pack(padx=10, pady=10)

def text_to_speech():
    engine = pyttsx3.init()
    engine.say("Hello, this is a text to speech test.")
    engine.runAndWait()

def exit_app():
    root.destroy()

root = tk.Tk()
root.title("Utility Application")

tk.Button(root, text="Web Search", command=web_search).pack(pady=5)
tk.Button(root, text="List EC2 Instances", command=list_ec2_instances).pack(pady=5)
tk.Button(root, text="Geolocation", command=geolocation).pack(pady=5)
tk.Button(root, text="Adjust Brightness", command=adjust_brightness).pack(pady=5)
tk.Button(root, text="Download YouTube Video", command=download_youtube_video).pack(pady=5)
tk.Button(root, text="Text to Speech", command=text_to_speech).pack(pady=5)
tk.Button(root, text="Exit", command=exit_app).pack(pady=5)

root.mainloop()